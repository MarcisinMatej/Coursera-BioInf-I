alph = ['A','C','G','T']

def pattern_to_number(pattern):
    num = 0

    for ex, c in enumerate(reversed(pattern)):
        i = alph.index(c)
        num += 4**ex * i
    return num


def number_to_patter(number, l):
    pattern = ""

    for ex in reversed(range(l)):
        i = number // (4**ex)
        pattern += alph[i]
        number -= 4**ex * i
    return pattern


def compute_frequency_arr(text,k):
    freq = [0 for i in range(4**k)]
    for i in range(len(text) + 1 - k):
        pat = text[i:i+k]
        freq[pattern_to_number(pat)] += 1
    return freq

if __name__ == '__main__':
    print(pattern_to_number("TCTAGTGGGTTAAAGT"))
    print(number_to_patter(7632,11))
    res = compute_frequency_arr("ACTCCGAAATAGGTAGCTAGCATTGCTAGACGCATAATGCCAAATAGCCTGTATCCCGCCGTTGCTCTTCATCTTCCTGGATATTGCAACCAATTAACAAGCCGCAACATTTTTTATAGCTCGAAGGTGCGCCGCGGTTATAGAAAAGGGAAAACGCTAAGGCCCGGGAAAGCTCCATATCGGACGATCAGGCTCCCCCCTTCATGCTGTCCGTCCCTATGGGCTATCGCTCATCTTGATTTAACAGCCGGTTTAGGAAAGGATCTCTCATGCTCATCGTGGAGTAGCACCGTCATTTCCATGGATCGTATAGACCGCCCTCAATAACCCAGTTCTCTTAAAACCTTAGCCTGATGGTAGGACGTTCAGCACCAGATGTTCTGATAAGTTGATGCTAACCGATGCACACGCCCGATGCGAGAATTTGGAAACATTTGAGATGAGGTCTTCACCCGGGCCCCCTCCCTGTATTGAACGATAAAGTCCTCGGTGCACTCAAGCATTTATAGGGTTTGCGTGGGCAAAGTGGTAGAAAGTATTAAAGGGGAACCTCATCACGGTCTCTGACGATACTATCTGACAATAGCGGGGATCGTATAGGCTACATAGGATTGAAATTCTTTTGAGTTAATTTCCTGCGGCAAGAGCCGTGCAACCGGACGAGGCGCGACTCAATGCATCGAACGATCATTGGAGTATTGAACTCTCGTGTTCCATCTTCACGATTCGGATACCCCATACCGTACGGTCTAAACATCAAACGGGAAGGTCTTC",6)
    print(" ".join(map(str,res)))